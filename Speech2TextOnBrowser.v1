import time
import pyautogui
import pyperclip
import webbrowser
import threading
import assemblyai as aai
import keyboard

transcription = ""
last_transcription = ""

aai.settings.api_key = "e8349e0c311e419ab4a0993dcade5866"  # Your AssemblyAI API key

# Function to open ChatGPT in Chrome
def open_chatgpt_in_chrome():
    # Opens ChatGPT URL in default browser
    webbrowser.open("https://chat.openai.com")

# Function to paste clipboard content into ChatGPT
def paste_and_send_clipboard_content():
    print("20")
    clipboard_content = pyperclip.paste()
    print(clipboard_content)  # Get clipboard content
    # Simulate pressing Ctrl+V to paste clipboard content
    pyautogui.hotkey('ctrl', 'v')  # Press Ctrl+V to paste into the input field
    time.sleep(1)  # Wait for the paste action to complete

    # Simulate pressing Enter to send the message
    pyautogui.press('enter')  # Press Enter to send the message
    print("Message sent.")
    return clipboard_content

# Function to start transcription with AssemblyAI
def start_transcription():
    global transcription
    transcriber = aai.RealtimeTranscriber(
        sample_rate=44100,  # Sample rate for better quality
        on_data=on_data,
        on_error=on_error,
        on_open=on_open,
        on_close=on_close,
        end_utterance_silence_threshold=150  # Silence threshold
    )
    transcriber.connect()
    microphone_stream = aai.extras.MicrophoneStream(sample_rate=44100)
    transcriber.stream(microphone_stream)

# Callback function when data is received
def on_data(transcript: aai.RealtimeTranscript):
    global transcription, last_transcription
    if not transcript.text:
        return

    # If it's the final transcript, update the transcription and copy to clipboard
    if isinstance(transcript, aai.RealtimeFinalTranscript):
        transcription += transcript.text
        print(f"Transcribed text: {transcription}")
        print(transcription)
        print(last_transcription)
        if(last_transcription != transcription):
            pyperclip.copy(transcription)  # Copy transcribed text to clipboard

# Callback functions for error and session closure
def on_error(error: aai.RealtimeError):
    print("An error occurred:", error)

def on_open(session_opened: aai.RealtimeSessionOpened):
    print("Session ID:", session_opened.session_id)

def on_close():
    print("Session closed.")

# Function to monitor clipboard and send content to ChatGPT
def monitor_clipboard():
    global last_transcription,transcription
    print("Monitoring clipboard for new content.")
    while True:
        if keyboard.is_pressed('num lock'):
            print("num lock")
            if(last_transcription!=transcription):
                last_transcription = paste_and_send_clipboard_content()
                time.sleep(1)  # Wait 1 second before checking the clipboard again
        if keyboard.is_pressed('shift'):
            clear()

def start_speechtotext():
    transcription_thread = threading.Thread(target=start_transcription)
    transcription_thread.start()

def clear():
    global transcription,last_transcription
    transcription = ""
    last_transcription = ""
    pyperclip.copy("")

def main():
    # Open ChatGPT in the browser
    open_chatgpt_in_chrome()

    # Wait for the page to load
    print("Waiting for ChatGPT to load...")
    time.sleep(10)  # Wait 10 seconds for ChatGPT to fully load

    # Start transcription in a separate thread
    start_speechtotext()

    # Start monitoring clipboard in the main thread
    pyautogui.hotkey('ctrl', 'v')
    pyautogui.press('enter')
    monitor_clipboard()

if __name__ == "__main__":
    pyperclip.copy("")
    main()


